'solc --version' running
'solc ./MemeActivityChecker-flatten.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/andrey/valory/meme-ooorr/audits/internal3/analysis/contracts' running
'solc --version' running
'solc ./BuyBackBurnerProxy-flatten.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/andrey/valory/meme-ooorr/audits/internal3/analysis/contracts' running
Compilation warnings/errors on ./BuyBackBurnerProxy-flatten.sol:
Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
  --> BuyBackBurnerProxy-flatten.sol:26:1:
   |
26 | contract BuyBackBurnerProxy {
   | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
  --> BuyBackBurnerProxy-flatten.sol:56:5:
   |
56 |     fallback() external payable {
   |     ^ (Relevant source part starts here and spans across multiple lines).


'solc --version' running
'solc ./Meme.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/andrey/valory/meme-ooorr/audits/internal3/analysis/contracts' running
'solc --version' running
'solc ./MemeCelo-flatten.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/andrey/valory/meme-ooorr/audits/internal3/analysis/contracts' running
Compilation warnings/errors on ./MemeCelo-flatten.sol:
Warning: Contract code size is 25822 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> MemeCelo-flatten.sol:1295:1:
     |
1295 | contract MemeCelo is MemeFactory {
     | ^ (Relevant source part starts here and spans across multiple lines).


'solc --version' running
'solc ./BuyBackBurner-flatten.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/andrey/valory/meme-ooorr/audits/internal3/analysis/contracts' running
'solc --version' running
'solc ./MemeArbitrum-flatten.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/andrey/valory/meme-ooorr/audits/internal3/analysis/contracts' running
Compilation warnings/errors on ./MemeArbitrum-flatten.sol:
Warning: Contract code size is 25947 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> MemeArbitrum-flatten.sol:1294:1:
     |
1294 | contract MemeArbitrum is MemeFactory {
     | ^ (Relevant source part starts here and spans across multiple lines).


'solc --version' running
'solc ./MemeFactory-flatten.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/andrey/valory/meme-ooorr/audits/internal3/analysis/contracts' running
'solc --version' running
'solc ./MemeBase-flatten.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/andrey/valory/meme-ooorr/audits/internal3/analysis/contracts' running
Compilation warnings/errors on ./MemeBase-flatten.sol:
Warning: Contract code size is 26603 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> MemeBase-flatten.sol:1300:1:
     |
1300 | contract MemeBase is MemeFactory {
     | ^ (Relevant source part starts here and spans across multiple lines).


INFO:Printers:
###################################
####### MemeActivityChecker #######
###################################

## Constructor Call Sequence
	- MemeActivityChecker

## Constructor Definitions

### MemeActivityChecker

     constructor(address _memeFactory, uint256 _livenessRatio) {
        // Check the zero address
        if (_memeFactory == address(0)) {
            revert ZeroAddress();
        }

        // Check for zero value
        if (_livenessRatio == 0) {
            revert ZeroValue();
        }

        memeFactory = _memeFactory;
        livenessRatio = _livenessRatio;
    }

INFO:Printers:
##################################
####### BuyBackBurnerProxy #######
##################################

## Constructor Call Sequence
	- BuyBackBurnerProxy

## Constructor Definitions

### BuyBackBurnerProxy

     constructor(address implementation, bytes memory buyBackBurnerData) {
        // Check for the zero address, since the delegatecall works even with the zero one
        if (implementation == address(0)) {
            revert ZeroImplementationAddress();
        }

        // Check for the zero data
        if (buyBackBurnerData.length == 0) {
            revert ZeroData();
        }

        // Store the buyBackBurner implementation address
        assembly {
            sstore(BUY_BACK_BURNER_PROXY, implementation)
        }
        // Initialize proxy storage
        (bool success, ) = implementation.delegatecall(buyBackBurnerData);
        if (!success) {
            revert InitializationFailed();
        }
    }

INFO:Printers:
####################
####### Meme #######
####################

## Constructor Call Sequence
	- ERC20
	- Meme

## Constructor Definitions

### ERC20

     constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;

        INITIAL_CHAIN_ID = block.chainid;
        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();
    }

### Meme

     constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _totalSupply
    ) ERC20(_name, _symbol, _decimals) {
        _mint(msg.sender, _totalSupply);
    }

INFO:Printers:
####################
####### Meme #######
####################

## Constructor Call Sequence
	- ERC20
	- Meme

## Constructor Definitions

### ERC20

     constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;

        INITIAL_CHAIN_ID = block.chainid;
        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();
    }

### Meme

     constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _totalSupply
    ) ERC20(_name, _symbol, _decimals) {
        _mint(msg.sender, _totalSupply);
    }

########################
####### MemeCelo #######
########################

## Constructor Call Sequence
	- MemeFactory
	- MemeCelo

## Constructor Definitions

### MemeFactory

     tructor(
        address _olas,
        address _nativeToken,
        address _uniV3PositionManager,
        address _buyBackBurner,
        uint256 _minNativeTokenValue
    ) {
        olas = _olas;
        nativeToken = _nativeToken;
        uniV3PositionManager = _uniV3PositionManager;
        buyBackBurner = _buyBackBurner;
        minNativeTokenValue = _minNativeTokenValue;
    }

  

### MemeCelo

     tructor(
        address _olas,
        address _nativeToken,
        address _uniV3PositionManager,
        address _buyBackBurner,
        uint256 _minNativeTokenValue
    ) MemeFactory(_olas, _nativeToken, _uniV3PositionManager, _buyBackBurner, _minNativeTokenValue) {}

  

INFO:Printers:
INFO:Printers:
####################
####### Meme #######
####################

## Constructor Call Sequence
	- ERC20
	- Meme

## Constructor Definitions

### ERC20

     constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;

        INITIAL_CHAIN_ID = block.chainid;
        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();
    }

### Meme

     constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _totalSupply
    ) ERC20(_name, _symbol, _decimals) {
        _mint(msg.sender, _totalSupply);
    }

############################
####### MemeArbitrum #######
############################

## Constructor Call Sequence
	- MemeFactory
	- MemeArbitrum

## Constructor Definitions

### MemeFactory

     tructor(
        address _olas,
        address _nativeToken,
        address _uniV3PositionManager,
        address _buyBackBurner,
        uint256 _minNativeTokenValue
    ) {
        olas = _olas;
        nativeToken = _nativeToken;
        uniV3PositionManager = _uniV3PositionManager;
        buyBackBurner = _buyBackBurner;
        minNativeTokenValue = _minNativeTokenValue;
    }

  

### MemeArbitrum

     tructor(
        address _olas,
        address _nativeToken,
        address _uniV3PositionManager,
        address _buyBackBurner,
        uint256 _minNativeTokenValue
    ) MemeFactory(_olas, _nativeToken, _uniV3PositionManager, _buyBackBurner, _minNativeTokenValue) {}

  

INFO:Printers:
####################
####### Meme #######
####################

## Constructor Call Sequence
	- ERC20
	- Meme

## Constructor Definitions

### ERC20

     constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;

        INITIAL_CHAIN_ID = block.chainid;
        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();
    }

### Meme

     constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _totalSupply
    ) ERC20(_name, _symbol, _decimals) {
        _mint(msg.sender, _totalSupply);
    }

###########################
####### MemeFactory #######
###########################

## Constructor Call Sequence
	- MemeFactory

## Constructor Definitions

### MemeFactory

     tructor(
        address _olas,
        address _nativeToken,
        address _uniV3PositionManager,
        address _buyBackBurner,
        uint256 _minNativeTokenValue
    ) {
        olas = _olas;
        nativeToken = _nativeToken;
        uniV3PositionManager = _uniV3PositionManager;
        buyBackBurner = _buyBackBurner;
        minNativeTokenValue = _minNativeTokenValue;
    }

  

INFO:Printers:
####################
####### Meme #######
####################

## Constructor Call Sequence
	- ERC20
	- Meme

## Constructor Definitions

### ERC20

     constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;

        INITIAL_CHAIN_ID = block.chainid;
        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();
    }

### Meme

     constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _totalSupply
    ) ERC20(_name, _symbol, _decimals) {
        _mint(msg.sender, _totalSupply);
    }

########################
####### MemeBase #######
########################

## Constructor Call Sequence
	- MemeFactory
	- MemeBase

## Constructor Definitions

### MemeFactory

     tructor(
        address _olas,
        address _nativeToken,
        address _uniV3PositionManager,
        address _buyBackBurner,
        uint256 _minNativeTokenValue
    ) {
        olas = _olas;
        nativeToken = _nativeToken;
        uniV3PositionManager = _uniV3PositionManager;
        buyBackBurner = _buyBackBurner;
        minNativeTokenValue = _minNativeTokenValue;
    }

  

### MemeBase

     tructor(
        address _olas,
        address _nativeToken,
        address _uniV3PositionManager,
        address _buyBackBurner,
        uint256 _minNativeTokenValue,
        address[] memory accounts,
        uint256[] memory amounts
    ) MemeFactory(_olas, _nativeToken, _uniV3PositionManager, _buyBackBurner, _minNativeTokenValue) {
        if (accounts.length > 0) {
            launchCampaignNonce = _nonce;
            _launchCampaignSetup(accounts, amounts);
            _nonce = launchCampaignNonce + 1;
            _launched = 0;
        }
    }

  

INFO:Slither:. analyzed (41 contracts)
